import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { NewPlayer, NewPlayerDocument } from '../schemas/new-player.schema';
import { CreatePlayerNewDto, UpdatePlayerNewDto } from './dto/player-new.dto';

@Injectable()
export class PlayerNewService {
  constructor(
    @InjectModel(NewPlayer.name)
    private playerNewModel: Model<NewPlayerDocument>,
  ) {}

  // 선수 프로필 조회
  async getPlayerProfile(playerKey: string): Promise<NewPlayerDocument | null> {
    return this.playerNewModel.findOne({ playerKey }).exec();
  }

  // 새 선수 생성
  async createPlayer(
    createPlayerDto: CreatePlayerNewDto,
  ): Promise<NewPlayerDocument> {
    const newPlayer = new this.playerNewModel({
      ...createPlayerDto,
      updatedAt: new Date(),
    });

    return newPlayer.save();
  }

  // 선수 정보 업데이트
  async updatePlayer(
    playerKey: string,
    updatePlayerDto: UpdatePlayerNewDto,
  ): Promise<NewPlayerDocument | null> {
    return this.playerNewModel
      .findOneAndUpdate(
        { playerKey },
        {
          ...updatePlayerDto,
          updatedAt: new Date(),
        },
        { new: true },
      )
      .exec();
  }

  // 팀별 선수 목록 조회
  async getPlayersByTeam(teamId: string): Promise<NewPlayerDocument[]> {
    return this.playerNewModel.find({ 'team.id': teamId }).exec();
  }

  // 포지션별 선수 목록 조회
  async getPlayersByPosition(position: string): Promise<NewPlayerDocument[]> {
    return this.playerNewModel.find({ 'profile.position': position }).exec();
  }

  // 선수 번호로 조회
  async getPlayerByNumber(
    teamId: string,
    number: number,
  ): Promise<NewPlayerDocument | null> {
    return this.playerNewModel
      .findOne({
        'team.id': teamId,
        'profile.number': number,
      })
      .exec();
  }

  // 계정 ID로 조회
  async getPlayerByAccountId(
    accountId: string,
  ): Promise<NewPlayerDocument | null> {
    return this.playerNewModel.findOne({ 'account.id': accountId }).exec();
  }

  // 선수 삭제
  async deletePlayer(playerKey: string): Promise<boolean> {
    const result = await this.playerNewModel.deleteOne({ playerKey }).exec();
    return result.deletedCount > 0;
  }

  // 전체 선수 목록 조회 (페이지네이션)
  async getAllPlayers(
    page: number = 1,
    limit: number = 20,
  ): Promise<{
    players: NewPlayerDocument[];
    total: number;
    page: number;
    totalPages: number;
  }> {
    const skip = (page - 1) * limit;

    const [players, total] = await Promise.all([
      this.playerNewModel.find().skip(skip).limit(limit).exec(),
      this.playerNewModel.countDocuments().exec(),
    ]);

    return {
      players,
      total,
      page,
      totalPages: Math.ceil(total / limit),
    };
  }

  // 선수 통계 업데이트
  async updatePlayerStats(
    playerKey: string,
    statsType: 'game' | 'season' | 'career',
    statsUpdate: any,
  ): Promise<NewPlayerDocument | null> {
    const updatePath = `stats.${statsType}`;

    return this.playerNewModel
      .findOneAndUpdate(
        { playerKey },
        {
          $set: { [updatePath]: statsUpdate },
          updatedAt: new Date(),
        },
        { new: true },
      )
      .exec();
  }

  // 성취 추가
  async addAchievement(
    playerKey: string,
    achievement: { year: number; title: string; description?: string },
  ): Promise<NewPlayerDocument | null> {
    return this.playerNewModel
      .findOneAndUpdate(
        { playerKey },
        {
          $push: { achievements: achievement },
          updatedAt: new Date(),
        },
        { new: true },
      )
      .exec();
  }

  // 성취 제거
  async removeAchievement(
    playerKey: string,
    achievementId: string,
  ): Promise<NewPlayerDocument | null> {
    return this.playerNewModel
      .findOneAndUpdate(
        { playerKey },
        {
          $pull: { achievements: { _id: achievementId } },
          updatedAt: new Date(),
        },
        { new: true },
      )
      .exec();
  }

  // 선수 검색 (이름, 계정 ID, 선수번호로)
  async searchPlayers(searchTerm: string): Promise<NewPlayerDocument[]> {
    const searchRegex = new RegExp(searchTerm, 'i');

    return this.playerNewModel
      .find({
        $or: [
          { 'profile.name': searchRegex },
          { 'account.id': searchRegex },
          { 'profile.number': parseInt(searchTerm) || -1 },
        ],
      })
      .exec();
  }

  // 활성 선수만 조회
  async getActivePlayers(): Promise<NewPlayerDocument[]> {
    return this.playerNewModel.find({ 'profile.status': 'Active' }).exec();
  }

  // 팀 내 포지션별 선수 조회
  async getPlayersByTeamAndPosition(
    teamId: string,
    position: string,
  ): Promise<NewPlayerDocument[]> {
    return this.playerNewModel
      .find({
        'team.id': teamId,
        'profile.position': position,
      })
      .exec();
  }
}
